version: '2.3'

services:
  protonwire:
    build: .
    container_name: protonwire
    init: true
    restart: never
    network_mode: bridge
    environment:
      DEBUG: "0"                          # Set to 1 to show debug logs for issue forms.
      KILL_SWITCH: "1"                    # Set to 0 to disable kill-switch.
      PROTONVPN_SERVER: ""                # REQUIRED - Quote this value as server name can contain '#'
      TZ: "Etc/UTC"
    cap_add:
      - NET_ADMIN                         # MANDATORY
    sysctls:
      - net.ipv4.conf.all.rp_filter=2     # MANDATORY
      - net.ipv6.conf.all.disable_ipv6=1  # ProtonVPN does not support IPv6
    healthcheck:
      test: ["CMD", "/bin/bash", "-c", "/usr/bin/protonwire check --container --silent || exit 1"]
      interval: 120s
      start_period: 20s
    ports:
      - 127.0.0.1:4699:4699               # protonwire-natpmpc info
    volumes:
      - type: tmpfs
        target: /tmp
      - type: bind
        source: private.key
        target: /etc/protonwire/private-key
        read_only: true

  # This service communicates with the ProtonVPN gateway and negotiates the port forwarding
  # The negotiated port can be read by e.g. 
  # curl -s 'http://127.0.0.1:4699/'
  protonwire-natpmpc:
    build: .
    container_name: protonwire-natpmpc
    init: true
    restart: never
    depends_on:
      protonwire:
        condition: service_healthy
    network_mode: service:protonwire
    environment:
      TZ: "Etc/UTC"
    volumes:
      - type: bind
        source: natpmp-info-reporter-service.sh
        target: /natpmp-info-reporter-service.sh
      - type: bind
        source: /tmp/protonwire-natpmpc-log
        target: /log
    entrypoint: ["/bin/bash", "-c"]
    command:
    - |
      __update_natpmp() { { date "+%Y-%m-%d %H:%M:%S"; natpmpc -a 1 0 udp 60 -g 10.2.0.1 && natpmpc -a 1 0 tcp 60 -g 10.2.0.1 || return 1; } 2>&1 | ts "[%Y-%m-%dT%H:%M:%S] |" >> "/log/protonwire-natpmpc.log"; };
      __trim_log() { [[ $$(wc -l "/log/protonwire-natpmpc.log" | awk -F " " '{ print $$1 }') -lt $$((128 * 1024)) ]] || sed 1,$$(( (128 * 1024) - (96 * 1024) ))d "/log/protonwire-natpmpc.log" | sponge "/log/protonwire-natpmpc.log"; };
      __socat_server() { [[ ! -f "/natpmp-info-reporter-service.sh" || ! -s "/natpmp-info-reporter-service.sh" ]] || socat TCP-LISTEN:4699,bind=$$(ip -j address show eth0 | jq -r ".[] | .addr_info[].local"),crlf,reuseaddr,fork SYSTEM:"/bin/bash -c /natpmp-info-reporter-service.sh" & };
      __sleep() { [[ "$${1}" =~ ^[0-9][0-9]*$$ ]] && { local -i T=$$(( $$(date "+%s") + $${1} )); while [[ $$(date "+%s") -lt $${T} ]]; do sleep 1; done; }; }
      __socat_server; { while true; do __update_natpmp || break; __trim_log; __sleep 45; done; }
    healthcheck:
      test:
       - CMD-SHELL
       - |
         [ $$(( $$(date "+%s") - $$(stat -c "%Y" "/log/protonwire-natpmpc.log") )) -lt 120 ] &&
           tail -n 46 "/log/protonwire-natpmpc.log" | grep -q -E "Public IP address : [0-9]{1,3}(\.[0-9]{1,3}){3}\s*$$" &&
           tail -n 46 "/log/protonwire-natpmpc.log" | grep -q -E "Mapped public port [1-9][0-9]* protocol UDP to local port 0 liftime 60\s*$$" &&
           tail -n 46 "/log/protonwire-natpmpc.log" | grep -q -E "Mapped public port [1-9][0-9]* protocol TCP to local port 0 liftime 60\s*$$"
      interval: 120s
      start_period: 23s

  # This is sample application which will be routed over VPN
  # Replace this with your preferred application(s).
  caddy_proxy:
    image: caddy:latest
    network_mode: service:protonwire
    command: |
      caddy reverse-proxy --change-host-header --from :80 --to https://ip.me:443
